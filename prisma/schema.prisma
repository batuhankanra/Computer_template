datasource db{
    provider = "mongodb"
    url = env("DB_URL")
}

generator client{
    provider = "prisma-client-js"
}

model User{
    id              String @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String @unique
    hashedPassword  String
    emailVerified   DateTime?
    accounts        Account[]
    role            Role @default(USER)
    category        Category[]
    products        Product[]
    order           Order[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

}

model Account{
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])

}
model Product{
    id  String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    price Float
    description String
    img String[]
    userId String  @db.ObjectId
    user User @relation(fields: [userId],references: [id])
    orderItem   OrderItems[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Category {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String  @unique
  parentId   String?
  userId    String @db.ObjectId 
  user User @relation(fields: [userId],references: [id])   
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Order {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String  @db.ObjectId
    user User @relation(fields: [userId],references: [id])
    items OrderItems[]
    total Float
    status String @default("pending ")
    createdAt  DateTime @default(now())



}
 model OrderItems{
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    orderId   String   @db.ObjectId
    order     Order    @relation(fields: [orderId], references: [id])
    quantity  Int
    price     Float
    productId String @db.ObjectId
    product   Product @relation(fields: [productId],references: [id])
 }

enum Role{
    USER
    ADMIN
}